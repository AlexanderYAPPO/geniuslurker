// Code generated by MockGen. DO NOT EDIT.
// Source: geniuslurker/genius_lyrics_fetcher_client_i.go

// Package mock_geniuslurker is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	datastructers "github.com/AlexanderYAPPO/geniuslurker/datastructers"
	gomock "github.com/golang/mock/gomock"
)

// MockFetcherClientI is a mock of FetcherClientI interface
type MockFetcherClientI struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherClientIMockRecorder
}

// MockFetcherClientIMockRecorder is the mock recorder for MockFetcherClientI
type MockFetcherClientIMockRecorder struct {
	mock *MockFetcherClientI
}

// NewMockFetcherClientI creates a new mock instance
func NewMockFetcherClientI(ctrl *gomock.Controller) *MockFetcherClientI {
	mock := &MockFetcherClientI{ctrl: ctrl}
	mock.recorder = &MockFetcherClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetcherClientI) EXPECT() *MockFetcherClientIMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockFetcherClientI) Search(searchString string) []datastructers.SearchResult {
	ret := m.ctrl.Call(m, "Search", searchString)
	ret0, _ := ret[0].([]datastructers.SearchResult)
	return ret0
}

// Search indicates an expected call of Search
func (mr *MockFetcherClientIMockRecorder) Search(searchString interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockFetcherClientI)(nil).Search), searchString)
}

// GetLyrics mocks base method
func (m *MockFetcherClientI) GetLyrics(searchResults datastructers.SearchResult) string {
	ret := m.ctrl.Call(m, "GetLyrics", searchResults)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLyrics indicates an expected call of GetLyrics
func (mr *MockFetcherClientIMockRecorder) GetLyrics(searchResults interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLyrics", reflect.TypeOf((*MockFetcherClientI)(nil).GetLyrics), searchResults)
}
